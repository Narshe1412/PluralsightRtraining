data("iris")
set.seed(42)
indexes <- sample(
x= 1:150,
size = 100
)
train <- iris[indexes,]
View(iris)
install.packages("tree")
library(tree)
model <- tree(
formula = Species ~ .,
data = train
)
summary(model)
plot(model)
text(model)
install.packages("RColorBrewer")
library(RColorBrewer)
palette <- brewer.pal(3, "set2")
palette <- brewer.pal(3, "Set2")
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal length (cm)",
ylab = "Petal width (cm)"
)
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
predictions <- predict(
object = model,
newdata = test,
type = "class"
)
test <- iris[-indexes,]
predictions <- predict(
object = model,
newdata = test,
type = "class"
)
table(
x = predictions,
y = test$Species
)
install.packages("caret")
library(caret)
confusionMatrix(
data = predictions,
reference = test$Species
)
library(caret)
confusionMatrix(
data = predictions,
reference = test$Species
)
install.packages("e1071")
confusionMatrix(
data = predictions,
reference = test$Species
)
save(model, file = "Tree.Rdata")
setwd("~/Repos/R")
install.packages("shiny")
library(shiny)
ui <- fluidPage("Hello world")
server <- function(input, output) {}
shinyApp(
ui= ui,
server = server
)
library(shiny)
ui <- fluidPage(
"Hello World"
)
server <- function(input, output) {}
shinyApp(
ui = ui,
server = server
)
library(shiny)
ui <- fluidPage(
titlePanel("Input Output"),
"Hello World"
)
server <- function(input, output) {}
shinyApp(
ui = ui,
server = server
)
runApp('Move R into production 2.R')
ui <- fluidPage(
titlePanel("Input Output"),
sidebarLayout(
"Hello World"
)
)
ui <- fluidPage(
titlePanel("Input Output"),
sidebarLayout(
mainPanel = "Hello World"
)
)
ui <- fluidPage(
titlePanel("Input Output"),
sidebarLayout(
sidebarPanel = "Side",
mainPanel = "Hello World"
)
)
server <- function(input, output) {}
shinyApp(
ui = ui,
server = server
)
runApp('Move R into production 2.R')
runApp('Move R into production 2.R')
runApp('Move R into production 2.R')
runApp('Move R into production 2.R')
runApp('Move R into production 2.R')
runApp('Move R into production 2.R')
runApp('Move R into production 3.R')
data("iris")
set.seed(42)
indexes <- sample(
x= 1:150,
size = 100
)
train <- iris[indexes,]
test <- iris[-indexes,]
library(tree)
model <- tree(
formula = Species ~ .,
data = train
)
summary(model)
plot(model)
text(model)
library(RColorBrewer)
palette <- brewer.pal(3, "Set2")
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal length (cm)",
ylab = "Petal width (cm)"
)
partition.tree(
tree = model,
label = "Species",
add = TRUE  #add to previous plot
)
table(
x = predictions,
y = test$Species
)
predictions <- predict(
object = model,
newdata = test,
type = "class"
)
library(caret)
confusionMatrix(
data = predictions,
reference = test$Species
)
save(model, file = "Tree.Rdata")
save(train, file = "Train.Rdata")
runApp('Move R into production 3.R')
runApp('Move R into production 3.R')
runApp('Move R into production 3.R')
load("~/Repos/R/Tree.Rdata")
load("~/Repos/R/Train.Rdata")
runApp('8 - Deploying to Production.R')
load("Train.RData")
load("Tree.RData")
runApp('8 - Deploying to Production.R')
runApp('Move R into production 3.R')
runApp('8 - Deploying to Production.R')
runApp('8 - Deploying to Production.R')
runApp('Move R into production 3.R')
runApp('Move R into production 3.R')
